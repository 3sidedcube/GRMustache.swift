{
  "tests": [
    {
      "name": "`capitalized` filter should change the first character from each word to its corresponding uppercase value, and all remaining characters to their corresponding lowercase values.",
      "data": "EDGAR allan poE",
      "template": "{{ capitalized(.) }}",
      "expected": "Edgar Allan Poe"
    },
    {
      "name": "`capitalized` filter should not mess with HTML escaping.",
      "data": "<&lT;>",
      "template": "{{ capitalized(.) }}",
      "expected": "&lt;&amp;Lt;&gt;"
    },
    {
      "name": "`capitalized` filter should be unicode-aware.",
      "data": "éÉ πΠ ßß ﬁﬁ œŒ ΣΣ ıI",
      "template": "{{ capitalized(.) }}",
      "expected": "Éé Ππ Ssß Fiﬁ Œœ Σς Ii"
    },
    {
      "name": "`lowercase` filter should change the all characters to their corresponding lowercase values.",
      "data": "EDGAR allan poE",
      "template": "{{ lowercase(.) }}",
      "expected": "edgar allan poe"
    },
    {
      "name": "`lowercase` filter should not mess with HTML escaping.",
      "data": "<&lT;>",
      "template": "{{ lowercase(.) }}",
      "expected": "&lt;&amp;lt;&gt;"
    },
    {
      "name": "`lowercase` filter should be unicode-aware.",
      "data": "ΣÉΠŒIΣ",
      "template": "{{ lowercase(.) }}",
      "expected": "σéπœiς"
    },
    {
      "name": "`uppercase` filter should change the all characters to their corresponding lowercase values.",
      "data": "EDGAR allan poE",
      "template": "{{ uppercase(.) }}",
      "expected": "EDGAR ALLAN POE"
    },
    {
      "name": "`uppercase` filter should not mess with HTML escaping.",
      "data": "<&lT;>",
      "template": "{{ uppercase(.) }}",
      "expected": "&lt;&amp;LT;&gt;"
    },
    {
      "name": "`uppercase` filter should be unicode-aware.",
      "data": "σéπßﬁœıς",
      "template": "{{ uppercase(.) }}",
      "expected": "ΣÉΠSSFIŒIΣ"
    },
    {
      "name": "`isBlank` filter should match missing keys.",
      "data": {},
      "template": "{{# isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should match null.",
      "data": { "object": null },
      "template": "{{# isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should match empty string.",
      "data": { "object": "" },
      "template": "{{# isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should match string containing only white spaces, tabs and new lines.",
      "data": { "object": " \t\n" },
      "template": "{{# isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should match empty list.",
      "data": { "object": [] },
      "template": "{{# isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should not match string containing non space character.",
      "data": { "object": " \t\nX \t\n" },
      "template": "{{^ isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should not match non-empty list.",
      "data": { "object": [0,1,2,3] },
      "template": "{{^ isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should not match non-empty list, even lists made of false values.",
      "data": { "object": [null] },
      "template": "{{^ isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should not match any object.",
      "data": { "object": { "foo": "bar" } },
      "template": "{{^ isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isBlank` filter should not match any object, even objects without any key.",
      "data": { "object": {} },
      "template": "{{^ isBlank(object) }}success{{/ isBlank(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should match missing keys.",
      "data": {},
      "template": "{{# isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should match null.",
      "data": { "object": null },
      "template": "{{# isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should match empty string.",
      "data": { "object": "" },
      "template": "{{# isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should match empty list.",
      "data": { "object": [] },
      "template": "{{# isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should not match string containing only white spaces, tabs and new lines.",
      "data": { "object": " \t\n" },
      "template": "{{^ isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should not match string containing non space character.",
      "data": { "object": " \t\nX \t\n" },
      "template": "{{^ isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should not match non-empty list.",
      "data": { "object": [0,1,2,3] },
      "template": "{{^ isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should not match non-empty list, even lists made of false values.",
      "data": { "object": [null] },
      "template": "{{^ isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should not match any object.",
      "data": { "object": { "foo": "bar" } },
      "template": "{{^ isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`isEmpty` filter should not match any object, even objects without any key.",
      "data": { "object": {} },
      "template": "{{^ isEmpty(object) }}success{{/ isEmpty(object) }}",
      "expected": "success"
    },
    {
      "name": "`HTML.escape` escapes nil as empty string.",
      "data": {},
      "template": "<{{HTML.escape(missing)}}>",
      "expected": "<>"
    },
    {
      "name": "`HTML.escape` escapes null as empty string.",
      "data": { "null": null },
      "template": "<{{HTML.escape(null)}}>",
      "expected": "<>"
    },
    {
      "name": "`HTML.escape` escapes any value, including numbers.",
      "data": 1,
      "template": "<{{HTML.escape(.)}}>",
      "expected": "<1>"
    },
    {
      "name": "`HTML.escape` escapes HTML characters of strings.",
      "data": "foo&\"'<>",
      "template": "{{{.}}} {{{HTML.escape(.)}}} {{HTML.escape(.)}}",
      "expected": "foo&\"'<> foo&amp;&quot;&apos;&lt;&gt; foo&amp;amp;&amp;quot;&amp;apos;&amp;lt;&amp;gt;"
    },
    {
      "name": "`HTML.escape` escapes all inner variable tags in a section.",
      "data": { "subject1": "<", "subject2": ">" },
      "template": "{{#HTML.escape}}{{subject1}}{{subject2}}{{{subject1}}}{{{subject2}}}{{/HTML.escape}}",
      "expected": "&amp;lt;&amp;gt;&lt;&gt;"
    },
    {
      "name": "`HTML.escape` does not escape inner section tags.",
      "data": { "subject1": "<" },
      "template": "{{#HTML.escape}}{{#subject1}}{{{subject1}}}{{/subject1}}{{^subject1}}-{{/subject1}}{{#subject2}}{{{subject2}}}{{/subject2}}{{^subject2}}-{{/subject2}}{{/HTML.escape}}",
      "expected": "&lt;-"
    },
    {
      "name": "`javascript.escape` escapes nil as empty string.",
      "data": {},
      "template": "<{{javascript.escape(missing)}}>",
      "expected": "<>"
    },
    {
      "name": "`javascript.escape` escapes null as empty string.",
      "data": { "null": null },
      "template": "<{{javascript.escape(null)}}>",
      "expected": "<>"
    },
    {
      "name": "`javascript.escape` escapes any value, including numbers.",
      "data": 1,
      "template": "<{{javascript.escape(.)}}>",
      "expected": "<1>"
    },
    {
      "name": "`javascript.escape` escapes any value",
      "data": "\"double quotes\" and 'single quotes'",
      "template": "{{javascript.escape(.)}}",
      "expected": "\\u0022double quotes\\u0022 and \\u0027single quotes\\u0027"
    },
    {
      "name": "`javascript.escape` escapes double and single quotes",
      "data": "\"double quotes\" and 'single quotes'",
      "template": "{{javascript.escape(.)}}",
      "expected": "\\u0022double quotes\\u0022 and \\u0027single quotes\\u0027"
    },
    {
      "name": "`javascript.escape` escapes backslashes",
      "data": "\\ : backslashes, too",
      "template": "{{javascript.escape(.)}}",
      "expected": "\\u005C : backslashes, too"
    },
    {
      "name": "`javascript.escape` escapes control characters",
      "data": "and lots of whitespace: \r\n\t\f\b",
      "template": "{{javascript.escape(.)}}",
      "expected": "and lots of whitespace: \\u000D\\u000A\\u0009\\u000C\\u0008"
    },
    {
      "name": "`javascript.escape` escapes HTML tags",
      "data": "<script>and this</script>",
      "template": "{{javascript.escape(.)}}",
      "expected": "\\u003Cscript\\u003Eand this\\u003C/script\\u003E"
    },
    {
      "name": "`javascript.escape` escapes PARAGRAPH SEPARATOR U+2029 and LINE SEPARATOR U+2028",
      "data": "paragraph separator:\u2029and line separator:\u2028",
      "template": "{{javascript.escape(.)}}",
      "expected": "paragraph separator:\\u2029and line separator:\\u2028"
    },
    {
      "name": "`javascript.escape` escapes all inner variable tags in a section.",
      "data": { "subject1": "'subject1'", "subject2": "'subject2'" },
      "template": "{{#javascript.escape}}{\"subject1\":\"{{subject1}}\",\"subject2\":\"{{subject2}}\"}{{/javascript.escape}}",
      "expected": "{\"subject1\":\"\\u0027subject1\\u0027\",\"subject2\":\"\\u0027subject2\\u0027\"}"
    },
    {
      "name": "`javascript.escape` does not escape inner section tags.",
      "data": { "subject1": "'subject1'" },
      "template": "{{#javascript.escape}}{\"subject1\":{{#subject1}}\"{{subject1}}\"{{/subject1}}{{^subject1}}null{{/subject1}},\"subject2\":{{#subject2}}\"{{subject2}}\"{{/subject2}}{{^subject2}}null{{/subject2}}}{{/javascript.escape}}",
      "expected": "{\"subject1\":\"\\u0027subject1\\u0027\",\"subject2\":null}"
    },
    {
      "name": "`URL.escape` escapes nil as empty string.",
      "data": {},
      "template": "<{{URL.escape(missing)}}>",
      "expected": "<>"
    },
    {
      "name": "`URL.escape` escapes null as empty string.",
      "data": { "null": null },
      "template": "<{{URL.escape(null)}}>",
      "expected": "<>"
    },
    {
      "name": "`URL.escape` escapes any value, including numbers.",
      "data": 1,
      "template": "<{{URL.escape(.)}}>",
      "expected": "<1>"
    },
    {
      "name": "`URL.escape` escapes strings with UTF8 encoding.",
      "data": "?&=\r\n\t\f\b<>\"[]{}",
      "template": "{{URL.escape(.)}}",
      "expected": "%3F%26%3D%0D%0A%09%0C%08%3C%3E%22%5B%5D%7B%7D"
    },
    {
      "name": "`URL.escape` escapes unicode strings with UTF8 encoding.",
      "data": "éı\ud83d\ude04",
      "template": "{{URL.escape(.)}}",
      "expected": "%C3%A9%C4%B1%F0%9F%98%84"
    },
    {
      "name": "`URL.escape` escapes all inner variable tags in a section.",
      "data": { "subject1": " ", "subject2": "&" },
      "template": "{{#URL.escape}}subject1={{subject1}}&subject2={{subject2}}{{/URL.escape}}",
      "expected": "subject1=%20&subject2=%26"
    },
    {
      "name": "`URL.escape` does not escape inner section tags.",
      "data": { "subject1": " " },
      "template": "{{#URL.escape}}subject1={{subject1}}&subject2={{#subject2}}{{subject2}}{{/subject2}}{{^subject2}}0{{/subject2}}{{/URL.escape}}",
      "expected": "subject1=%20&subject2=0"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@first`, `@last` keys available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{^ @first }}{{# @last }} and {{^}}, {{/}}{{/}}{{.}}{{/}}",
      "expected": "a, b, c and d"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@index` key available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{ @index }}{{/}}",
      "expected": "0123"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@indexPlusOne` key available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{ @indexPlusOne }}{{/}}",
      "expected": "1234"
    },
    {
      "name": "`each` filter iterates its array argument and makes the `@indexIsEven` key available for rendering.",
      "data": {
        "array": ["a", "b", "c", "d"]
      },
      "template": "{{# each(array) }}{{# @indexIsEven }}e{{^}}o{{/}}{{/}}",
      "expected": "eoeo"
    },
    {
      "name": "`each` filter does not render for empty arrays.",
      "data": {
        "array": []
      },
      "template": "{{# each(array) }}---{{^}}+++{{/}}",
      "expected": "+++"
    },
    {
      "name": "`each` filter does not alter context access.",
      "data": { "array": [{ "name": "foo" }, { "name": "bar" }] },
      "template": "{{# each(array) }}<{{@index}}:{{name}}>{{/}}",
      "expected": "<0:foo><1:bar>"
    },
    {
      "name": "`each` filter should render independently all lists of an array.",
      "data": { "array": [["a", "b"], [], [0, 1]] },
      "template": "<{{# each(array) }}{{@index}}:({{#.}}{{.}}{{^}}-{{/}}){{/}}>",
      "expected": "<0:(ab)1:(-)2:(01)>"
    },
    {
      "name": "`each` filter iterates its dictionary argument and make the `@key` key available for rendering.",
      "data": {
        "dictionary": { "key": "value" }
      },
      "template": "{{# each(dictionary) }}{{ @key }}:{{.}}{{/}}",
      "expected": "key:value"
    },
    {
      "name": "`each` filter iterates its dictionary argument and make the `@first`, `@last` keys available for rendering.",
      "data": {
        "dictionary": { "key1": "value", "key2": "value", "key3": "value" }
      },
      "template": "{{# each(dictionary) }}{{^ @first }}{{# @last }} and {{^}}, {{/}}{{/}}{{.}}{{/}}",
      "expected": "value, value and value"
    },
    {
      "name": "`each` filter iterates its dictionary argument and makes the `@index` key available for rendering.",
      "data": {
        "dictionary": { "key1": "value1", "key2": "value2", "key3": "value3" }
      },
      "template": "{{# each(dictionary) }}{{ @indexPlusOne }}{{/}}",
      "expected": "123"
    },
    {
      "name": "`each` filter iterates its dictionary argument and makes the `@indexPlusOne` key available for rendering.",
      "data": {
        "dictionary": { "key1": "value1", "key2": "value2", "key3": "value3" }
      },
      "template": "{{# each(dictionary) }}{{ @indexPlusOne }}{{/}}",
      "expected": "123"
    },
    {
      "name": "`each` filter iterates its dictionary argument and makes the `@indexIsEven` key available for rendering.",
      "data": {
        "dictionary": { "key1": "value", "key2": "value", "key3": "value" }
      },
      "template": "{{# each(dictionary) }}{{# @indexIsEven }}e{{^}}o{{/}}{{/}}",
      "expected": "eoe"
    },
    {
      "name": "`each` filter does not render for empty dictionaries.",
      "data": {
        "dictionary": {}
      },
      "template": "{{# each(dictionary) }}---{{^}}+++{{/}}",
      "expected": "+++"
    },
    {
      "name": "`each` filter does not alter context access.",
      "data": { "dictionary": { "key": { "name": "foo" } } },
      "template": "{{# each(dictionary) }}<{{@key}}:{{name}}>{{/}}",
      "expected": "<key:foo>"
    },
    {
      "name": "`each` filter should render independently all lists of a dictionary.",
      "data": { "dictionary": { "key": [ "a", "b" ] } },
      "template": "{{# each(dictionary) }}{{ @key }}:{{#.}}{{.}}{{/}}{{/}}",
      "expected": "key:ab"
    }
  ]
}
